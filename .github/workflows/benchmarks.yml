name: benchmark_dotnet_linux

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  ITERATION_COUNT: 2
  BASE_VERSION: 6.0.300
  BASE_VERSION_WINDOWS: https://download.visualstudio.microsoft.com/download/pr/cc89c1f6-0d56-46fd-88f9-1fbd8ce074ec/753afbad1926cbc8d28aa4a2dd7d9d66/dotnet-sdk-6.0.300-win-x64.zip
  BASE_VERSION_LINUX: https://download.visualstudio.microsoft.com/download/pr/dc930bff-ef3d-4f6f-8799-6eb60390f5b4/1efee2a8ea0180c94aff8f15eb3af981/dotnet-sdk-6.0.300-linux-x64.tar.gz
  DEV_VERSION: dev.2d93510ef                    
  BRANCH_VERSION: walker.0f4f837af
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  RESTORE_USE_LEGACY_ALGORITHM: 0

# -skipForceRestores -skipNoOpRestores -skipColdRestores

jobs:
  benchmark_nuget_windows:
    runs-on: windows-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout test solutions
        run: |
          git clone --recursive https://github.com/dotnet/orleans
          git clone --recursive https://github.com/OrchardCMS/OrchardCore.git
          git clone --recursive https://github.com/NuGet/NuGet.Client.git
          git clone --recursive https://github.com/marcin-krystianc/TestSolutions

      - name: Disable strong name verification
        run: |
          reg DELETE "HKLM\Software\Microsoft\StrongName\Verification" /f
          reg ADD "HKLM\Software\Microsoft\StrongName\Verification\*,*" /f
          reg DELETE "HKLM\Software\Wow6432Node\Microsoft\StrongName\Verification" /f
          reg ADD "HKLM\Software\Wow6432Node\Microsoft\StrongName\Verification\*,*" /f
      
      - name: Setup .NET Core SDK ${{env.BASE_VERSION}}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{env.BASE_VERSION}}
          
      - name: Benchmark
        shell: pwsh
        run: |
          $nugetFoldersPath = [System.IO.Path]::GetFullPath(".nuget")
          #$solutions = @("NuGet.Client", "orleans", "OrchardCore", "TestSolutions/SanitisedNetCoreApp3.1Centralised/SanitisedNetCoreApp3.1Centralised.sln", "TestSolutions/SanitisedNetCoreApp3.1/SanitisedNetCoreApp3.1.sln")
          $solutions = @("TestSolutions/LargeAppWithPrivatePackages/solution/LargeAppWithPrivatePackages.sln", "TestSolutions/LargeAppWithPrivatePackagesCentralised/solution/LargeAppWithPrivatePackagesCentralised.sln")
          $versions = @("${{env.DEV_VERSION}}", "${{env.BRANCH_VERSION}}")
          For ($i=0; $i -lt 2; $i++) { 
              ForEach ($solution In $solutions) {
                  ForEach ($version In $versions) {
                    .\scripts\perftests\RunPerformanceTests.ps1 -nugetClientFilePath .\artifacts\$version\NuGet.CommandLine\bin\Release\net472\NuGet.exe  -solutionFilePath $solution -resultsFilePath results_windows_nuget_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}.csv -iterationCount ${{env.ITERATION_COUNT}} -staticGraphRestore -nugetFoldersPath $nugetFoldersPath -skipNoOpRestores -skipColdRestores
                  }
              }
          }

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: results_windows_nuget_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}
          path: results_windows_nuget_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}.csv

  benchmark_dotnet_windows:
    runs-on: windows-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Download .NET Core SDK ${{env.BASE_VERSION}}
        shell: pwsh
        run: |
          curl -sSL ${{env.BASE_VERSION_WINDOWS}} -o dotnet.zip
          Expand-Archive dotnet.zip -DestinationPath dotnet
          # Add(prepend) local dotnet to the system PATH
          echo "$env:GITHUB_WORKSPACE\dotnet" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
         
      - name: Prepare test SDKs
        shell: pwsh
        run: |
          $versions = @("${{env.DEV_VERSION}}", "${{env.BRANCH_VERSION}}")
          ForEach ($version In $versions) {
              Copy-Item -Path .\dotnet\sdk\${{env.BASE_VERSION}} -Destination .\dotnet\sdk\${{env.BASE_VERSION}}-$version -Recurse
              Copy-Item -Path .\artifacts\$version\NuGet.Build.Tasks.Console\bin\Release\netcoreapp5.0\* -Destination .\dotnet\sdk\${{env.BASE_VERSION}}-$version 
              $content = Get-Content -Path .\dotnet\sdk\${{env.BASE_VERSION}}-$version\.version
              $newcontent = $content -replace "${{env.BASE_VERSION}}", "${{env.BASE_VERSION}}-$version"
              Set-Content -Path .\dotnet\sdk\${{env.BASE_VERSION}}-$version\.version -Value $newcontent
              Get-Content -Path .\dotnet\sdk\${{env.BASE_VERSION}}-$version\.version
          }
          Get-ChildItem .
          Get-ChildItem .\dotnet\sdk\

      - name: Checkout test solutions
        shell: pwsh
        run: |
          git clone --recursive https://github.com/dotnet/orleans
          git clone --recursive https://github.com/OrchardCMS/OrchardCore.git
          git clone --recursive https://github.com/NuGet/NuGet.Client.git
          git clone --recursive https://github.com/marcin-krystianc/TestSolutions
          Remove-Item -Path 'orleans\global.json'
          Remove-Item -Path 'NuGet.Client\global.json'

      - name: Disable strong name verification
        shell: pwsh
        run: |
          reg DELETE "HKLM\Software\Microsoft\StrongName\Verification" /f
          reg ADD "HKLM\Software\Microsoft\StrongName\Verification\*,*" /f
          reg DELETE "HKLM\Software\Wow6432Node\Microsoft\StrongName\Verification" /f
          reg ADD "HKLM\Software\Wow6432Node\Microsoft\StrongName\Verification\*,*" /f
 
      - name: Benchmark
        shell: pwsh
        run: |
          $nugetFoldersPath = [System.IO.Path]::GetFullPath(".nuget")
          #$solutions = @("NuGet.Client", "orleans", "OrchardCore", "TestSolutions/SanitisedNetCoreApp3.1Centralised/SanitisedNetCoreApp3.1Centralised.sln", "TestSolutions/SanitisedNetCoreApp3.1/SanitisedNetCoreApp3.1.sln")
          $solutions = @("TestSolutions/LargeAppWithPrivatePackages/solution/LargeAppWithPrivatePackages.sln", "TestSolutions/LargeAppWithPrivatePackagesCentralised/solution/LargeAppWithPrivatePackagesCentralised.sln")
          $versions = @("${{env.BASE_VERSION}}-${{env.DEV_VERSION}}", "${{env.BASE_VERSION}}-${{env.BRANCH_VERSION}}", "${{env.BASE_VERSION}}")
          For ($i=0; $i -lt 2; $i++) {
              ForEach ($solution In $solutions) {
                  ForEach ($version In $versions) {
                    $sdk = '{"sdk": { "version": "' + $version + '" } }'
                    Set-Content -Path global.json -Value $sdk   
                    Get-Content -Path global.json
                    .\scripts\perftests\RunPerformanceTests.ps1 -nugetClientFilePath .\dotnet\dotnet.exe -solutionFilePath $solution -resultsFilePath results_windows_dotnet_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}.csv -iterationCount ${{env.ITERATION_COUNT}} -staticGraphRestore -nugetFoldersPath $nugetFoldersPath -skipNoOpRestores -skipColdRestores
                  }
              }
          }
          
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: results_windows_dotnet_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}
          path: results_windows_dotnet_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}.csv

  benchmark_dotnet_linux:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Download .NET Core SDK ${{env.BASE_VERSION}}
        shell: pwsh
        run: |
          curl -sSL ${{env.BASE_VERSION_LINUX}} -o dotnet.tar.gz
          New-Item -Name "dotnet" -ItemType "directory"
          tar -xf dotnet.tar.gz -C dotnet
          # Add(prepend) local dotnet to the system PATH
          echo "$env:GITHUB_WORKSPACE/dotnet" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Prepare test SDKs
        shell: pwsh
        run: |
          $versions = @("${{env.DEV_VERSION}}", "${{env.BRANCH_VERSION}}")
          ForEach ($version In $versions) {
              Copy-Item -Path .\dotnet\sdk\${{env.BASE_VERSION}} -Destination .\dotnet\sdk\${{env.BASE_VERSION}}-$version -Recurse
              Copy-Item -Path .\artifacts\$version\NuGet.Build.Tasks.Console\bin\Release\netcoreapp5.0\* -Destination .\dotnet\sdk\${{env.BASE_VERSION}}-$version
              $content = Get-Content -Path .\dotnet\sdk\${{env.BASE_VERSION}}-$version\.version
              $newcontent = $content -replace "${{env.BASE_VERSION}}", "${{env.BASE_VERSION}}-$version"
              Set-Content -Path .\dotnet\sdk\${{env.BASE_VERSION}}-$version\.version -Value $newcontent
          }
          Get-ChildItem .
          Get-ChildItem .\dotnet\sdk\

      - name: Checkout test solutions
        shell: pwsh
        run: |
          git clone --recursive https://github.com/dotnet/orleans
          git clone --recursive https://github.com/OrchardCMS/OrchardCore.git
          git clone --recursive https://github.com/NuGet/NuGet.Client.git
          git clone --recursive https://github.com/marcin-krystianc/TestSolutions
          Remove-Item -Path 'orleans\global.json'
          Remove-Item -Path 'NuGet.Client\global.json'
  
      - name: Benchmark
        shell: pwsh
        run: |
          $nugetFoldersPath = [System.IO.Path]::GetFullPath(".nuget")
          #$solutions = @("orleans", "OrchardCore", "TestSolutions/SanitisedNetCoreApp3.1Centralised/SanitisedNetCoreApp3.1Centralised.sln", "TestSolutions/SanitisedNetCoreApp3.1/SanitisedNetCoreApp3.1.sln")
          $solutions = @("TestSolutions/LargeAppWithPrivatePackages/solution/LargeAppWithPrivatePackages.sln", "TestSolutions/LargeAppWithPrivatePackagesCentralised/solution/LargeAppWithPrivatePackagesCentralised.sln")
          $versions = @("${{env.BASE_VERSION}}-${{env.DEV_VERSION}}", "${{env.BASE_VERSION}}-${{env.BRANCH_VERSION}}", "${{env.BASE_VERSION}}")
          For ($i=0; $i -lt 2; $i++) {
              ForEach ($solution In $solutions) {
                  ForEach ($version In $versions) {
                    $sdk = '{"sdk": { "version": "' + $version + '" } }'
                    Set-Content -Path global.json -Value $sdk
                    Get-Content -Path global.json
                    .\scripts\perftests\RunPerformanceTests.ps1 -nugetClientFilePath dotnet/dotnet -solutionFilePath $solution -resultsFilePath results_linux_dotnet_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}.csv -iterationCount ${{env.ITERATION_COUNT}} -staticGraphRestore -nugetFoldersPath $nugetFoldersPath -skipNoOpRestores -skipColdRestores
                  }
              }
          }

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: results_linux_dotnet_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}
          path: results_linux_dotnet_${{github.run_id}}_${{env.RESTORE_USE_LEGACY_ALGORITHM}}.csv
