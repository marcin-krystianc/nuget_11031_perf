name: benchmark_dotnet_linux

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  ITERATION_COUNT: 10
  BASE_VERSION: rc.1.21458.32
  BASE_VERSION_WINDOWS: https://download.visualstudio.microsoft.com/download/pr/575db146-cef0-45f8-8517-c874d62deac7/c63b8d10cc85f237f1a56935d0e85895/dotnet-sdk-6.0.100-rc.1.21458.32-win-x64.zip
  BASE_VERSION_LINUX: https://download.visualstudio.microsoft.com/download/pr/4880c5a4-9c22-47a7-b298-651f1294a385/795f7828d8684059705e625b33027f89/dotnet-sdk-6.0.100-rc.1.21458.32-linux-x64.tar.gz
  DEV_VERSION: dev.838751441
  BRANCH_VERSION: nommap.5a8b1c47a
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  benchmark_nuget_windows:
    runs-on: windows-2019
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout test solutions
        run: |
          git clone --recursive https://github.com/dotnet/orleans
          git clone --recursive https://github.com/OrchardCMS/OrchardCore.git
          git clone --recursive https://github.com/NuGet/NuGet.Client.git
          git clone --recursive https://github.com/marcin-krystianc/TestSolutions

      - name: Disable strong name verification
        run: |
          reg DELETE "HKLM\Software\Microsoft\StrongName\Verification" /f
          reg ADD "HKLM\Software\Microsoft\StrongName\Verification\*,*" /f
          reg DELETE "HKLM\Software\Wow6432Node\Microsoft\StrongName\Verification" /f
          reg ADD "HKLM\Software\Wow6432Node\Microsoft\StrongName\Verification\*,*" /f

      - name: Benchmark
        shell: pwsh
        run: |
          $solutions = @("TestSolutions/SanitisedNetCoreApp3.1Centralised", "TestSolutions/SanitisedNetCoreApp3.1CentralisedOptimized")
          $versions = @("${{env.DEV_VERSION}}")
          For ($i=0; $i -lt 2; $i++) {
              ForEach ($solution In $solutions) {
                  ForEach ($version In $versions) {
                    .\scripts\perftests\RunPerformanceTests.ps1 -nugetClientFilePath .\artifacts\$version\NuGet.CommandLine\bin\Release\net472\NuGet.exe  -solutionFilePath $solution -resultsFilePath results.csv -skipForceRestores -skipNoOpRestores -skipColdRestores -iterationCount ${{env.ITERATION_COUNT}} -staticGraphRestore
                  }
              }
          }

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: results_windows_nuget
          path: results.csv

  benchmark_dotnet_windows:
    runs-on: windows-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Download .NET Core SDK 6.0.100-${{env.BASE_VERSION}}
        shell: pwsh
        run: |
          curl -sSL ${{env.BASE_VERSION_WINDOWS}} -o dotnet.zip
          Expand-Archive dotnet.zip -DestinationPath dotnet
          # Add(prepend) local dotnet to the system PATH
          echo "$env:GITHUB_WORKSPACE\dotnet" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
         
      - name: Prepare test SDKs
        shell: pwsh
        run: |
          $versions = @("${{env.DEV_VERSION}}", "${{env.BRANCH_VERSION}}")
          ForEach ($version In $versions) {
              Copy-Item -Path .\dotnet\sdk\6.0.100-${{env.BASE_VERSION}} -Destination .\dotnet\sdk\6.0.100-$version -Recurse
              Copy-Item -Path .\artifacts\$version\NuGet.Build.Tasks\bin\Release\netstandard2.0\* -Destination .\dotnet\sdk\6.0.100-$version
              $content = Get-Content -Path .\dotnet\sdk\6.0.100-$version\.version
              $newcontent = $content -replace "6.0.100-${{env.BASE_VERSION}}", "6.0.100-$version"
              Set-Content -Path .\dotnet\sdk\6.0.100-$version\.version -Value $newcontent
          }

      - name: Checkout test solutions
        shell: pwsh
        run: |
          git clone --recursive https://github.com/dotnet/orleans
          git clone --recursive https://github.com/OrchardCMS/OrchardCore.git
          git clone --recursive https://github.com/NuGet/NuGet.Client.git
          git clone --recursive https://github.com/marcin-krystianc/TestSolutions
          Remove-Item -Path 'orleans\global.json'
          Remove-Item -Path 'NuGet.Client\global.json'

      - name: Disable strong name verification
        shell: pwsh
        run: |
          reg DELETE "HKLM\Software\Microsoft\StrongName\Verification" /f
          reg ADD "HKLM\Software\Microsoft\StrongName\Verification\*,*" /f
          reg DELETE "HKLM\Software\Wow6432Node\Microsoft\StrongName\Verification" /f
          reg ADD "HKLM\Software\Wow6432Node\Microsoft\StrongName\Verification\*,*" /f
 
      - name: Benchmark
        shell: pwsh
        run: |
          $solutions = @("TestSolutions/SanitisedNetCoreApp3.1Centralised", "TestSolutions/SanitisedNetCoreApp3.1CentralisedOptimized")
          $versions = @("${{env.BASE_VERSION}}")
          For ($i=0; $i -lt 2; $i++) {
              ForEach ($solution In $solutions) {
                  ForEach ($version In $versions) {
                    $sdk = '{"sdk": { "version": "6.0.100-' + $version + '" } }'
                    Set-Content -Path global.json -Value $sdk   
                    .\scripts\perftests\RunPerformanceTests.ps1 -nugetClientFilePath .\dotnet\dotnet.exe -solutionFilePath $solution -resultsFilePath results.csv -skipForceRestores -skipNoOpRestores -skipColdRestores -iterationCount ${{env.ITERATION_COUNT}} -staticGraphRestore
                  }
              }
          }
          
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: results_windows_dotnet
          path: results.csv

  benchmark_dotnet_linux:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Download .NET Core SDK 6.0.100-${{env.BASE_VERSION}}
        shell: pwsh
        run: |
          curl -sSL ${{env.BASE_VERSION_LINUX}} -o dotnet.tar.gz
          New-Item -Name "dotnet" -ItemType "directory"
          tar -xf dotnet.tar.gz -C dotnet
          # Add(prepend) local dotnet to the system PATH
          echo "$env:GITHUB_WORKSPACE/dotnet" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Prepare test SDKs
        shell: pwsh
        run: |
          $versions = @("${{env.DEV_VERSION}}", "${{env.BRANCH_VERSION}}")
          ForEach ($version In $versions) {
              Copy-Item -Path .\dotnet\sdk\6.0.100-${{env.BASE_VERSION}} -Destination .\dotnet\sdk\6.0.100-$version -Recurse
              Copy-Item -Path .\artifacts\$version\NuGet.Build.Tasks\bin\Release\netstandard2.0\* -Destination .\dotnet\sdk\6.0.100-$version
              $content = Get-Content -Path .\dotnet\sdk\6.0.100-$version\.version
              $newcontent = $content -replace "6.0.100-${{env.BASE_VERSION}}", "6.0.100-$version"
              Set-Content -Path .\dotnet\sdk\6.0.100-$version\.version -Value $newcontent
          }

      - name: Checkout test solutions
        shell: pwsh
        run: |
          git clone --recursive https://github.com/dotnet/orleans
          git clone --recursive https://github.com/OrchardCMS/OrchardCore.git
          git clone --recursive https://github.com/NuGet/NuGet.Client.git
          git clone --recursive https://github.com/marcin-krystianc/TestSolutions
          Remove-Item -Path 'orleans\global.json'
          Remove-Item -Path 'NuGet.Client\global.json'
  
      - name: Benchmark
        shell: pwsh
        run: |
          $solutions = @("TestSolutions/SanitisedNetCoreApp3.1Centralised", "TestSolutions/SanitisedNetCoreApp3.1CentralisedOptimized")
          $versions = @("${{env.BASE_VERSION}}")
          For ($i=0; $i -lt 2; $i++) {
              ForEach ($solution In $solutions) {
                  ForEach ($version In $versions) {
                    $sdk = '{"sdk": { "version": "6.0.100-' + $version + '" } }'
                    Set-Content -Path global.json -Value $sdk
                    .\scripts\perftests\RunPerformanceTests.ps1 -nugetClientFilePath dotnet/dotnet -solutionFilePath $solution -resultsFilePath results.csv -skipForceRestores -skipNoOpRestores -skipColdRestores -iterationCount ${{env.ITERATION_COUNT}} -staticGraphRestore
                  }
              }
          }

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: results_linux_dotnet
          path: results.csv
